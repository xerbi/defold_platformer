local SPEED_WALK = 100
local JUMP_SPEED = 200
local GRAVITY = 500
local INPUT_COOLDOWN = 0.1
-- local FALL_SPEED = -100
-- local LEFT_WALL = -1w 
-- local RIGHT_WALL = 1

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")
	self.velocity = vmath.vector3()
	self.direction = 0
	self.animation = nil
	self.is_ground = false
	self.right_wall = false
	self.left_wall = false
	--на стене
	self.on_right_wall = false
	self.on_left_wall = false
	self.correction = vmath.vector3()

	self.jump = false
	self.wall_jump = false
	--был ли соверше двойной прыжок
	self.is_double_jump = false
	--размеры спрайта
	self.size_spite = go.get("go#sprite", "size")
	--длина луча для определения припятствия
	self.ray_length = self.size_spite.x / 2
	--текущая нажатая клавиша
	self.action_id = nil
	--расположение персонажа в пространстве
	self.up_ray_dote = false
	--воспроизведение не цикличных анимаций. Если сейчас воспроизводится,
	--блоириуем выполнение теукущих
	self.is_busy = false


	self.input_cooldown = 0
end


function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function draw_line(from, to)
	msg.post("@render:", "draw_line", { start_point = from, end_point = to, color = vmath.vector4(1,0,0,1) })
end
--создание трех векторов по условиям:
--current_position - вектор, который будет меняться,
--static_pos -- вектор постоянной длинны,
--vector_steps -- вектор изменения.
local function create_rays_points(current_position, static_pos, vector_steps)
	local number_points = 3
	local save_object = {}
	local change_in_x = vector_steps.x
	local change_in_y = vector_steps.y
	for i = 1, number_points do
		table.insert(save_object, vmath.vector3(
		current_position.x + static_pos.x + change_in_x,
		current_position.y + static_pos.y + change_in_y,
		current_position.z))
		change_in_x = change_in_x - vector_steps.x
		change_in_y = change_in_y - vector_steps.y
	end
	return save_object
end

local function check_moving_x(self, current_position)
	local start_points = create_rays_points(current_position,
		vmath.vector3(0, 0, 0), vmath.vector3(0, self.ray_length - 2, 0))
	local end_left_points = create_rays_points(current_position,
		vmath.vector3(- self.ray_length + 5, 0, 0), vmath.vector3(0, self.ray_length - 2, 0))
	local end_right_points = create_rays_points(current_position,
		vmath.vector3(self.ray_length - 5, 0, 0), vmath.vector3(0, self.ray_length - 2, 0))
	local my_groups = { hash("ground") }
	self.left_wall = false
	self.right_wall = false
	for i = 1, 3 do
		if (physics.raycast(start_points[i], end_left_points[i], my_groups)) then
			self.left_wall = true
			break
		end
		if (physics.raycast(start_points[i], end_right_points[i], my_groups)) then
			self.right_wall = true
			break
		end
	end
end

local function check_moving_y(self, current_position)
	local start_points_down = create_rays_points(current_position,
		vmath.vector3(0, 0, 0), vmath.vector3(self.ray_length - 8, 0, 0))
	local end_points_down = create_rays_points(current_position,
		vmath.vector3(0, - (self.ray_length), 0), vmath.vector3(self.ray_length - 8, 0, 0))
	local my_groups = { hash("ground") }
	local hit = nil
	for i = 1, 3 do
		hit = physics.raycast(start_points_down[i], end_points_down[i], my_groups)
		if (hit) then break end
	end
	for i = 1, 3 do
		draw_line(start_points_down[i], end_points_down[i])
	end
	if (hit) then
		self.velocity.y = 0
		self.is_ground = true
		--компенсация
		-- if (current_position.y > hit.position.y) then
		-- 	pprint(hit)
		-- 	go.set_position(vmath.vector3(current_position.x, hit.position.y, 0))
		-- end
	else
		self.is_ground = false
	end
end
local function animation_release(self)
	self.is_busy = false
end
function update(self, dt)
	--текущее положение объекта
	local current_position = go.get_position()
	check_moving_x(self, current_position)
	if (self.jump) then self.jump = false
	else check_moving_y(self, current_position) end
	--проверка состояния персонажа относительно стены
	if (self.right_wall and self.action_id == hash('right')) then
		self.on_right_wall = true
	elseif (self.left_wall and self.action_id == hash('left')) then
		self.on_left_wall = true
	else
		self.on_right_wall = false
		self.on_left_wall = false
	end
	--применение гравитации
	self.velocity.y = self.velocity.y - GRAVITY * dt
	if (self.is_ground or self.on_right_wall or self.on_left_wall) then
		self.velocity.y = 0
		--если мы на стене, то двойной прыжок сделать нельзя
		if (self.on_right_wall or self.on_left_wall) then
			self.is_double_jump = true
		else
			--иначе сбрасываем двойно прыжок
			self.is_double_jump = false
		end
		--сьрасываем прыжок
		self.jump = false
		--освобождение анимации
		animation_release(self)
	end
	if (self.direction ~= 0) then
		--направление спрайта (flip)
		if (self.direction > 0 or self.right_wall) then
			sprite.set_hflip("#sprite", false)
		else
			sprite.set_hflip("#sprite", true)
		end
	end
	--включение анимации
	if (self.direction > 0 and self.is_ground) then
		if (self.animation ~= hash('walk')) then
			sprite.play_flipbook("#sprite", hash("walk"))
		end
		self.animation = hash('walk')
	elseif (self.direction < 0 and self.is_ground) then
		if (self.animation ~= hash('walk')) then
			sprite.play_flipbook("#sprite", hash("walk"))
		end
		self.animation = hash('walk')
	elseif (self.velocity.y < 0) then
		sprite.play_flipbook("#sprite", hash("fall"))
		self.animation = hash('fall')
	elseif (self.velocity.y > 0) then
		if (self.is_busy ~= true) then
			sprite.play_flipbook("#sprite", hash("jump"))
			self.animation = hash('jump')
		end
	elseif ((self.right_wall or self.left_wall) and self.is_ground ~= true) then
		sprite.play_flipbook("#sprite", hash("wall_jump"))
		self.animation = hash('wall_jump')
		animation_release(self)
	else
		if (self.animation ~= hash('idle')) then
			sprite.play_flipbook("#sprite", hash("idle"))
		end
		self.animation = hash('idle')
	end
	--проверка столкновения со стеной
	if (self.direction > 0 and self.right_wall) then self.velocity.x = 0 end
	if (self.direction < 0 and self.left_wall) then self.velocity.x = 0 end
	--установка новой позиции
	go.set_position(current_position + self.velocity * dt)
	self.velocity.x = 0
	self.action_id = nil
	self.input_cooldown = math.max(0, self.input_cooldown - dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + comp)
				self.correction = self.correction + comp
			end
		end
	end
end

local function walk(self)
	self.velocity.x = SPEED_WALK * self.direction
end

local function jump(self)
	self.velocity.y = JUMP_SPEED
	self.is_ground = false
end

local function wall_jump(self)
	self.velocity = vmath.vector3(100 * self.direction, JUMP_SPEED, 0)
	self.is_ground = false
	self.wall_jump = true
	-- self.on_right_wall = false
	-- self.on_left_wall = false
end

function on_input(self, action_id, action)
	if self.input_cooldown > 0 then
		return
	else
		-- if (self.wall_jump) then
		-- 	self.wall_jump = false
		-- 	self.direction = 0
		-- end
	end
	if (action_id == hash('right')) then
		if (action.pressed) then
			self.direction = 1
		elseif (action.released and self.direction == 1) then
			self.direction = 0
		end
		self.action_id = hash('right')
	elseif (action_id == hash('left')) then
		if (action.pressed) then
			self.direction = -1
		elseif (action.released and self.direction == -1) then
			self.direction = 0
		end
		self.action_id = hash('left')
	elseif (action_id == hash('jump') and action.pressed) then
		print(action_id)
		if (self.on_right_wall) then
			self.direction = -1
			wall_jump(self)
			self.input_cooldown = INPUT_COOLDOWN
			print('Мы справа')
		elseif (self.on_left_wall) then
			self.direction = 1
			wall_jump(self)
			self.input_cooldown = INPUT_COOLDOWN
			print('Мы слева')
		end
		if (self.is_ground) then
			jump(self)
			self.jump = true
			self.action_id = hash('jump')
		elseif (self.is_double_jump ~= true) then
			jump(self)
			self.is_double_jump = true
			self.action_id = hash('double_jump')
			self.is_busy = true
			--сообщение компоненту sprite: воспроизведи анимацию. В ананимной фунции
			--освобождаем персонажа от проигранной анимации (после выполнения)
			sprite.play_flipbook("#sprite", "double_jump", function() animation_release(self) end)
		end
	end
	walk(self)
end